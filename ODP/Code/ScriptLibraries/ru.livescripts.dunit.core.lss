'++LotusScript Development Environment:2:5:(Options):0:74
%REM
	ru.livescripts.dunit.core
	
	Created: Oct 6, 2017
	Author: Artem A Areshko/LiveScripts/RU (Live-Scripts)
	
	Description: 
%END REM

Option Public
Option Declare

%REM
	---=== Change Log ===---
	--- Version: 1.2.0; 09.04.2018; Artem Areshko
	1. Added
		TestContext.OpenLogFile()
		AbstractTestRunner.AskToOpenLog() - both works only for Win
		IMatcher.GetExpectedAndActualAsString()
		
	2. Modified
		AbstractTestRunner.PrintResult - receives TestResult as argument
		AbstractTestRunner.Run - gets TestResult, calls PrintResult and AskToOpenLog,
		if there are any failures
		Assert.Equals - is .Matches() = false, call IMatcher.GetExpectedAndActualAsString()
		when throwing and error
	
	--- Version: 1.1.1; 18.11.2017; Artem Areshko
	1. Modified 
		AbstractTestRunner.TestFailed()
			Bug: was print instead of TestContext.Log()
		TestContext.CloseLog()
			Spelling mistake
		AbstractTestRunner.PrintResult()
			Added log closing
	
	--- Version: 1.1.0; 12.11.2017; Artem Areshko
	1. Added consts
		LS_TEST_ERROR_MATCHER_PARAM
		LS_TEST_ERROR_OTHER
	
	2. Renamed methods for Assert class
		AssertTrue -> True
		AssertFalse -> False
		AssertEquals -> Equals
		
	3. Added methods
		Assert.NotNothing()
		TestContext.InitLog()
		TextContext.Log()
		TextContext.CloseLog()
	
	4. Deleted method Assert.AssertError()
	
	5. Added class AbstractTestRunner
	
%END REM

'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Class Assert
Declare Class IMatcher
Declare Public Class TestContext
Declare Class AbstractTest
Declare Class TestResult
Declare Class AbstractTestRunner
Declare Static Function Assert() As Assert
Declare Static Function TestContext() As TestContext

'++LotusScript Development Environment:2:5:(Declarations):0:10
Private Const DESIGN = "ru.livescripts.dunit.core"

Public Const LS_TEST_ERROR_ASSERT_FAIL = 3999
Public Const LS_TEST_ERROR_MATCHER_PARAM = 3998
Public Const LS_TEST_ERROR_OTHER = 3997

Public Const LS_TEST_STATUS_NOT_RUNNED = "Not runned"
Public Const LS_TEST_STATUS_OK = "OK"
Public Const LS_TEST_STATUS_FAILED = "FAILED"

Private Const LS_TEST_ERRORMSG_ASSERT_FAIL = "Assert failed: "
Class Assert
	
	Public Sub True(actual As Boolean)
		If Not actual Then Call Me.Throwerror("True")
	End Sub
	
	Public Sub False(actual As Boolean)
		If actual Then Call Me.Throwerror("False")
	End Sub
	
	Public Sub Equals(matcher As IMatcher)
		On Error GoTo ErrorHandler
		Const FuncName = "Assert.Equals ()"
		
		If Not Matcher.Matches() Then Call Me.Throwerror(funcName & Chr(10) & matcher.GetExpectedAndActualAsString())
		
		GoTo endh
ErrorHandler:
		Error Err, "(" & DESIGN & ") " & FuncName & ", line " & Erl & Chr(10) & Error$
endh:
	End Sub
	
	Public Sub NotNothing(actual As Variant)
		On Error GoTo ErrorHandler
		Const FuncName = "Assert.NotNothing ()"
		
		If Not IsObject(actual) Then
			Error LS_TEST_ERROR_OTHER, {actual is not an object}
		End If
		If actual Is Nothing Then Call Me.Throwerror("NotNothing")
		
		GoTo endh
ErrorHandler:
		Error Err, "(" & DESIGN & ") " & FuncName & ", line " & Erl & Chr(10) & Error$
endh:
	End Sub
	
	Private Sub ThrowError(assertName As String)
		Error LS_TEST_ERROR_ASSERT_FAIL, LS_TEST_ERRORMSG_ASSERT_FAIL & Assertname
	End Sub

End Class
Class IMatcher
	
	'@Abstract
	Public Function Matches() As Boolean
	End Function

	'@Abstract	
	Public Function GetExpectedAndActualAsString() As String
	End Function

End Class
Public Class TestContext
	
	Private session As NotesSession
	
	Private tests List As String
	
	Private stream As NotesStream
	Private logFolder As String
	Private logFileName As String
	
	Public Sub New()
		Set session = New NotesSession
	End Sub
	
	Public Sub Add(testName As String)
		On Error GoTo ErrorHandler
		Const FuncName = "TestContext.Add ()"
		
		tests(testName) = LS_TEST_STATUS_NOT_RUNNED
		
		GoTo endh
ErrorHandler:
		Error Err, "(" & DESIGN & ") " & FuncName & ", line " & Erl & Chr(10) & Error$
endh:
	End Sub
	
	Public Sub SetTestStatus(testName As String, status As String)
		On Error GoTo ErrorHandler
		Const FuncName = "TestContext.SetTestStatus ()"
		
		tests(testName) = status
		
		GoTo endh
ErrorHandler:
		Error Err, "(" & DESIGN & ") " & FuncName & ", line " & Erl & Chr(10) & Error$
endh:
	End Sub
	
	Public Function GetResult() As TestResult
		On Error GoTo ErrorHandler
		Const FuncName = "TestContext.GetResult ()"
		
		Dim result As New TestResult()
		
		ForAll test In tests
			result.Total = result.Total + 1
			Select Case test
				Case LS_TEST_STATUS_OK
					result.Success = result.Success + 1
				Case LS_TEST_STATUS_FAILED
					result.Failed = result.Failed + 1
			End Select
		End ForAll
		
		Set GetResult = result
		
		GoTo endh
ErrorHandler:
		Error Err, "(" & DESIGN & ") " & FuncName & ", line " & Erl & Chr(10) & Error$
endh:
	End Function
	
	Public Sub InitLog(logFolder As String)
		On Error GoTo ErrorHandler
		Const FuncName = "TestContext.InitLog ()"
		
		Dim session As New NotesSession
		Set stream = session.Createstream()
		
		Me.logFolder = logFolder
		If Me.logFolder = "" Then
			Me.logFolder = Environ("TEMP")
		End If
		logFileName = Me.logFolder & "\DUnit-Log-" & Format(Now, "yyyy_mm_dd hh_mm_ss") & ".txt"
		Call stream.Open(logFileName, "UTF-8")
		
		GoTo endh
ErrorHandler:
		Error Err, "(" & DESIGN & ") " & FuncName & ", line " & Erl & Chr(10) & Error$
endh:
	End Sub
	
	Public Sub CloseLog()
		On Error GoTo ErrorHandler
		Const FuncName = "TestContext.CloseLog ()"
		
		Call stream.Close()		
		Print "DUnit. Test details saved to: " & logFileName
		
		GoTo endh
ErrorHandler:
		Error Err, "(" & DESIGN & ") " & FuncName & ", line " & Erl & Chr(10) & Error$
endh:
	End Sub
	
	Public Sub Log(message As String)
		On Error GoTo ErrorHandler
		Const FuncName = "TestContext.Log ()"
		
		Call stream.Writetext(message, EOL_PLATFORM)
		
		GoTo endh
ErrorHandler:
		Error Err, "(" & DESIGN & ") " & FuncName & ", line " & Erl & Chr(10) & Error$
endh:
	End Sub
	
	Public Sub OpenLogFile()
		On Error GoTo ErrorHandler
		Const FuncName = "TestContext.OpenLogFile ()"
		
		Dim result As Integer
		result = Shell("notepad.exe " & Me.Logfilename)
		
		GoTo endh
ErrorHandler:
		Error Err, "(" & DESIGN & ") " & FuncName & ", стр. " & Erl & Chr(10) & Error$
endh:
	End Sub
	
	Public Function GetSession() As NotesSession
		Set GetSession = session
	End Function

End Class
Class AbstractTest
	
	Public Sub BeginTest(testName As String)
		On Error GoTo ErrorHandler
		Const FuncName = "AbstractTest.BeginTest ()"
		
		TestContext().Add(testName)
		
		GoTo endh
ErrorHandler:
		Error Err, "(" & DESIGN & ") " & FuncName & ", line " & Erl & Chr(10) & Error$
endh:
	End Sub
	
	Public Sub EndTest(testName As String)
		On Error GoTo ErrorHandler
		Const FuncName = "AbstractTest.EndTest ()"
		
		Call TestContext.SetTestStatus(Testname, LS_TEST_STATUS_OK)
		Call TestContext.Log(testName & ": " & LS_TEST_STATUS_OK)
		
		GoTo endh
ErrorHandler:
		Error Err, "(" & DESIGN & ") " & FuncName & ", line " & Erl & Chr(10) & Error$
endh:
	End Sub

End Class
Class TestResult
	
	Public Total As Integer
	Public Success As Integer
	Public Failed As Integer
	
	Public Sub New()
		On Error GoTo ErrorHandler
		Const FuncName = "TestResult.New ()"
		
		Total = 0
		Success = 0
		Failed = 0
		
		GoTo endh
ErrorHandler:
		Error Err, "(" & DESIGN & ") " & FuncName & ", line " & Erl & Chr(10) & Error$
endh:
	End Sub

End Class
Class AbstractTestRunner
	
	Public Sub New()
		On Error GoTo ErrorHandler
		Const FuncName = "AbstractTestRunner.New ()"
		
		Call Me.Initialize()
		
		GoTo endh
ErrorHandler:
		Error Err, "(" & DESIGN & ") " & FuncName & ", line " & Erl & Chr(10) & Error$
endh:
	End Sub
	
	Private Sub Initialize()
		On Error GoTo ErrorHandler
		Const FuncName = "AbstractTestRunner.Initialize ()"
		
		Call TestContext.Initlog("")
		
		GoTo endh
ErrorHandler:
		Error Err, "(" & DESIGN & ") " & FuncName & ", line " & Erl & Chr(10) & Error$
endh:
	End Sub
	
	Public Function Run()
		On Error GoTo ErrorHandler
		Const FuncName = "AbstractTestRunner.Run ()"
		
		Call TestContext.Log("Started running tests at " & Now)
		Call TestContext.Log("----------------------------------")
		
		Call Me.DoRunTests()
		
		Call TestContext.Log("----------------------------------")
		Call TestContext.Log("Finished tests at " & Now)
		Call TestContext.Log("----------------------------------")
		
		Dim result As TestResult		
		Set result = TestContext.GetResult()
		Call Me.PrintResult(result)
		If result.Failed > 0 Then
			Call Me.AskToOpenLog()
		End If
		
		GoTo endh
ErrorHandler:
		Error Err, "(" & DESIGN & ") " & FuncName & ", line " & Erl & Chr(10) & Error$
endh:
	End Function
	
	'@Abstract
	Private Sub DoRunTests()
		On Error GoTo ErrorHandler
		Const FuncName = "AbstractTestRunner.DoRunTests ()"
		
		'Override
		
		GoTo endh
ErrorHandler:
		Call Me.TestFailed(Error$)
		Resume Next
endh:
	End Sub
	
	Private Sub TestFailed(stackTraceString As String)
		On Error GoTo ErrorHandler
		Const FuncName = "AbstractTestRunner.TestFailed ()"
		
		Dim testName As String
		
		testName = Me.GetTestName(Error$)
		Call TestContext.SetTestStatus(testName, LS_TEST_STATUS_FAILED)
		Call TestContext.Log(testName & ": " & LS_TEST_STATUS_FAILED)
		
		Dim stackTrace As Variant
		stackTrace = Split(stackTraceString, Chr(10))
		ForAll elem In stackTrace
			Call TestContext.Log(CStr(elem))	
		End ForAll
		
		GoTo endh
ErrorHandler:
		Error Err, "(" & DESIGN & ") " & FuncName & ", line " & Erl & Chr(10) & Error$
endh:
	End Sub
	
	Private Function GetTestName(errorString As String)
		On Error GoTo ErrorHandler
		Const FuncName = "AbstractTestRunner.GetTestName ()"
		
		GetTestName = StrRight(StrLeft(errorString$, ","), ") ")
		
		GoTo endh
ErrorHandler:
		Error Err, "(" & DESIGN & ") " & FuncName & ", line " & Erl & Chr(10) & Error$
endh:
	End Function
	
	Private Sub PrintResult(result As TestResult)
		On Error GoTo ErrorHandler
		Const FuncName = "AbstractTestRunner.PrintResult ()"
		
		Dim summary As String
		summary = "DUnit. Tests summary. Total: " & result.Total & "; Success: " & _
		result.Success & "; Failed: " & result.Failed
		
		Call TestContext.Log(summary)
		Call TestContext.Closelog()
		Print summary		
		
		GoTo endh
ErrorHandler:
		Error Err, "(" & DESIGN & ") " & FuncName & ", line " & Erl & Chr(10) & Error$
endh:
	End Sub
	
	Private Sub AskToOpenLog()
		On Error GoTo ErrorHandler
		Const FuncName = "AbstractTestRunner.AskToOpenLog ()"
		
		If InStr(TestContext().Getsession().Platform, "Windows") > 0 Then
			If MessageBox("Not all tests ran successully. Whould you like to open log file?", 4 + 48, "Open log file?") = 6 Then
				Call TestContext.Openlogfile()
			End If	
		End If		
		
		GoTo endh
ErrorHandler:
		Error Err, "(" & DESIGN & ") " & FuncName & ", стр. " & Erl & Chr(10) & Error$
endh:
	End Sub

End Class
'++LotusScript Development Environment:2:1:Assert:5:8
'Assert
%REM
	Description: 
%END REM
Static Function Assert() As Assert
	On Error GoTo ErrorHandler
	Const FuncName = "Assert ()"
	
	Static this As Assert
	
	If this Is Nothing Then
		Set this = New Assert()
	End If
	
	Set Assert = this
	
	GoTo endh
ErrorHandler:
	Error Err, "(" & DESIGN & ") " & FuncName & ", line " & Erl & Chr(10) & Error$
endh:
End Function

'++LotusScript Development Environment:2:1:TestContext:5:8
'TestContext
%REM
	Description: 
%END REM
Static Function TestContext() As TestContext
	On Error GoTo ErrorHandler
	Const FuncName = "TestContext ()"
	
	Static this As TestContext
	
	If this Is Nothing Then
		Set this = New TestContext()
	End If
	
	Set TestContext = this
	
	GoTo endh
ErrorHandler:
	Error Err, "(" & DESIGN & ") " & FuncName & ", line " & Erl & Chr(10) & Error$
endh:
End Function












